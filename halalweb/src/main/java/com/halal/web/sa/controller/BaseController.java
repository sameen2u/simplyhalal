package com.halal.web.sa.controller;import java.io.IOException;import java.io.InputStream;import java.util.Collections;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.io.IOUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationContext;import org.springframework.core.io.Resource;import org.springframework.web.servlet.ModelAndView;import com.halal.web.sa.core.exception.ApplicationException;import com.halal.web.sa.service.BaseService;import com.samskivert.mustache.Mustache;public abstract class BaseController {		@Autowired 	ApplicationContext context;		@Autowired	Mustache.Compiler compiler;		public ModelAndView performExecute(HttpServletRequest request, HttpServletResponse response, ModelAndView modelAndView) throws ApplicationException {		Map<String, Object> globalMap = null;		globalMap = (Map<String, Object>) getAPIServiceProvider().executeService(request,response);			String templateName = request.getAttribute("channel")+"/"+getTemplateName();		String finalHtml = getHtmlTemplate(templateName, globalMap);		modelAndView.addObject("finalHTML",finalHtml);		processResponse(modelAndView, globalMap);		return modelAndView;			}		/**	 * This method will compile the mustache template and domain object and returns HTML in String format	 * @param templatepath	 * @return	 */	public String getHtmlTemplate(String templatepath, Map domainMap){		Resource resource = context.getResource("classpath:templates/"+templatepath);		String template = null; 		    try{		     	  InputStream is = resource.getInputStream();		     	 template =	IOUtils.toString(is);			    	}catch(IOException e){		    		e.printStackTrace();		    	}		    		    String html = compiler.compile(template).execute(domainMap);			return html;	}		protected abstract BaseService getAPIServiceProvider();		protected abstract void processResponse(ModelAndView modelAndView, Map<String, Object> globalMap);	protected abstract String getTemplateName();}